name: Image Security Pipeline

on:
  push:
    branches:
      - main  # Adjust the branch as needed

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Scipt to Download and install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.45.1

    - name: Create trivy-reports directory
      run: mkdir -p trivy-reports
      shell: bash

    - name: Scan images and generate reports
      run: |
        # Define the list of image names you want to scan
        images=("alpine:latest" "nginx:latest" "ubuntu:latest" "python:latest" "redis:latest" "postgres:latest" "node:latest" "httpd:latest" "memcached:latest" "mongo:latest" "mysql:latest" "traefik:latest" "mariadb:latest" "docker:latest" "rabbitmq:latest" "golang:latest" "wordpress:latest" "php:latest" "sonarqube:latest" "ruby:latest" "haproxy:latest" "tomcat:latest" "kong:latest" "neo4j:latest")
        current_date=$(date +'%Y-%m-%d')
        for image in "${images[@]}"; do
          sanitized_name="${image//:/_}"
          echo "Scanning $image"
          trivy image -f json -o "trivy-reports/$sanitized_name.json" "$image"
          jq 'del(.Metadata.DiffIDs)' "trivy-reports/$sanitized_name.json" > "trivy-reports/$sanitized_name-no-diffid.json" && mv "trivy-reports/$sanitized_name-no-diffid.json" "trivy-reports/$sanitized_name.json"

          # jq -c '.' "trivy-reports/$sanitized_name.json" > "trivy-reports/$sanitized_name.ndjson" && mv "trivy-reports/$sanitized_name.ndjson" "trivy-reports/$sanitized_name.json"

        done
      shell: bash

    - name: Upload Trivy Reports
      uses: actions/upload-artifact@v2
      with:
        name: trivy-reports
        path: trivy-reports

    - name: Set up AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region eu-north-1
      shell: bash
    
    - name: Python manipulation
      run: |
        
        image_name_pattern='"ArtifactName": \[(.*?)\],'
        image_version_pattern='"Env": [ \[(.*?)\],'
        image_vulnerability_pattern='"Vulnerabilities": \[(.*?)\],'
    
        for report in trivy-reports/*.json; do
          if [ -f "$report" ]; then
            data=$(cat "$report")
            # echo "data is $data"

          count_low=0
          count_medium=0
          count_high=0
  
          # Convert JSON to a single-line string
          json_string=$(echo "$data" | tr -d '\n')
  
          # echo "string without spaces and newlines: $json_string"
  
          # Extract data using regular expressions
          if [[ $json_string =~ $image_name_pattern ]]; then
            image_name="${BASH_REMATCH[1]}"
            echo "Image_Name_is: $image_name"
          fi
  
          if [[ $json_string =~ $image_version_pattern ]]; then
            image_version="${BASH_REMATCH[1]}"
            echo "Image_Version_is: $image_version"
          fi
  
          if [[ $json_string =~ $image_vulnerability_pattern ]]; then
            vulnerability_list="${BASH_REMATCH[1]}"
            echo "Vulnerability_List_is: $vulnerability_list"

            # Count the occurrences of LOW, MEDIUM, and HIGH
            while IFS= read -r line; do
              if [[ $line == *"LOW"* ]]; then
                ((count_low++))
              elif [[ $line == *"MEDIUM"* ]]; then
                ((count_medium++))
              elif [[ $line == *"HIGH"* ]]; then
                ((count_high++))

            echo "Count of LOW: $count_low"
            echo "Count of MEDIUM: $count_medium"
            echo "Count of HIGH: $count_high"
          fi
        fi
        done
      shell: bash
      #   image_name_pattern = r'ArtifactName: (.*?),'
      #   image_version_pattern = r'"RUBY_VERSION= (.*?)",'
      #   image_Vulnerability_pattern = r'"Vulnerabilities": [{ (.*?)},{'

      #   for report in trivy-reports/*.json; do
      #     with open(report, 'r') as json_file:
      #       data = json.load(json_file)
      #       echo "data is {0}".format(data)
            
      #       # convert to a string
      #       json_string = json.dumps(data)
      #       echo json_string

          
      #       # prepares string for regular expressions
            
      #       json_string = json_string.replace(" ", "")
      #       echo "string without spaces {0}".format(json_string)
      #       json_string = json_string.replace("\n ", "")
      #       echo "string without spaces and newlines{0}".format(json_string)
            
      #       # Gets our data to populate CSV File

      #       image_name = re.findall(image_name_pattern, json_string)
      #       echo image_name
      #       image_version = re.findall(image_version_pattern, json_string)
      #       echo image_version
      #       vulnerability_list = re.findall(image_Vulnerability_pattern, json_string)
      #       echo vulnerability_list


      #   done
      # shell: bash


    # - name: Upload Trivy Reports to Amazon S3
    #   run: |
    #     # Define the S3 bucket and folder (prefix) where you want to upload the reports
    #     s3_bucket="imagereportbucket"
    #     current_date=$(date +'%Y-%m-%d')
    #     # Define the S3 prefix, including the current date
    #     s3_prefix="trivy-reports-${current_date}/"
  
    #     # Loop through the reports and upload them to S3
    #     for report in trivy-reports/*.json; do
    #       aws s3 cp "$report" "s3://$s3_bucket/$s3_prefix$(basename $report)"
    #     done
    #   shell: bash