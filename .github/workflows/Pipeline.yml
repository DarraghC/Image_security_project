name: Image Security Pipeline

on:
  push:
    branches:
      - main  # Adjust the branch as needed

jobs:
  scan:
    runs-on: ubuntu-latest

    # env:
    #   VERSION_DICT: '{}'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Scipt to Download and install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.45.1

    - name: Create trivy-reports directory
      run: |
        mkdir -p trivy-reports
        mkdir -p trivy-version-reports
      shell: bash

    - name: Scan images and generate reports
      run: |
        # Define the list of image names you want to scan
        images=("alpine:latest" "nginx:latest" "ubuntu:latest" "python:latest" "redis:latest" "postgres:latest" "node:latest" "httpd:latest" "memcached:latest" "mongo:latest" "mysql:latest" "traefik:latest" "mariadb:latest" "docker:latest" "rabbitmq:latest" "golang:latest" "wordpress:latest" "php:latest" "sonarqube:latest" "ruby:latest" "haproxy:latest" "tomcat:latest" "kong:latest" "neo4j:latest")
        current_date=$(date +'%Y-%m-%d')
        for image in "${images[@]}"; do
          sanitized_name="${image//:/_}"
          echo "Scanning $image"
          trivy image -f json -o "trivy-reports/$sanitized_name.json" "$image"
          jq 'del(.Metadata.DiffIDs)' "trivy-reports/$sanitized_name.json" > "trivy-reports/$sanitized_name-no-diffid.json" && mv "trivy-reports/$sanitized_name-no-diffid.json" "trivy-reports/$sanitized_name.json"

          # docker inspect "$image" > "$json_file"


          # jq -c '.' "trivy-reports/$sanitized_name.json" > "trivy-reports/$sanitized_name.ndjson" && mv "trivy-reports/$sanitized_name.ndjson" "trivy-reports/$sanitized_name.json"

        done
      shell: bash
    
    - name: Inspect Docker Images
      run: |
        # Iterate through the images array and perform docker inspect
        images=("alpine:latest" "nginx:latest" "ubuntu:latest" "python:latest" "redis:latest" "postgres:latest" "node:latest" "httpd:latest" "memcached:latest" "mongo:latest" "mysql:latest" "traefik:latest" "mariadb:latest" "docker:latest" "rabbitmq:latest" "golang:latest" "wordpress:latest" "php:latest" "sonarqube:latest" "ruby:latest" "haproxy:latest" "tomcat:latest" "kong:latest" "neo4j:latest")
        for image in "${images[@]}"; do
          # Define the JSON file path for the current image
          sanitized_name="${image//:/_}"
          json_file="trivy-version-reports/$sanitized_name-docker-inspect.json"

          # Perform docker inspect and save the output to the JSON file
          docker pull "$image"
          docker inspect "$image" > "$json_file"

          # You can optionally capture and process the output as needed
          # For example, if you want to extract specific information from the JSON
          # Example: image_id=$(jq -r '.[0].Id' "$json_file")

          echo "Docker inspect for $image completed, results saved to $json_file"
        done

    - name: Upload Trivy Reports
      uses: actions/upload-artifact@v2
      with:
        name: trivy-repotrs
        path: trivy-reports

    - name: Set up AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region eu-north-1
      shell: bash

    - name: Create csv directory
      run: mkdir -p csv-data
      shell: bash
    
    - name: Check if project_data.csv exists if not create
      run: |
        if aws s3 ls s3://imagereportbucket/data_folder/project_data.csv; then
          echo "File exists"
          aws s3 cp s3://imagereportbucket/data_folder/project_data.csv csv-data/
        else
          echo "File does not exist"
          echo "Creating project_data.csv"
          echo "Your data" > csv-data/project_data.csv  # Create your data file locally
          # aws s3 cp csv-data/project_data.csv s3://imagereportbucket/data_folder/  # Upload the file to S3
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8  

    - name: Run Python script
      run: |
       chmod +x Python_scripts/python_main.py
       python Python_scripts/python_main.py  # Replace with the actual name of your Python script


    # - name: Upload Trivy Reports to Amazon S3
    #   run: |
    #     # Define the S3 bucket and folder (prefix) where you want to upload the reports
    #     s3_bucket="imagereportbucket"
    #     current_date=$(date +'%Y-%m-%d')
    #     # Define the S3 prefix, including the current date
    #     s3_prefix="trivy-reports-${current_date}/"
  
    #     # Loop through the reports and upload them to S3
    #     for report in trivy-reports/*.json; do
    #       aws s3 cp "$report" "s3://$s3_bucket/$s3_prefix$(basename $report)"
    #       aws s3 cp csv-data/project_data.csv s3://imagereportbucket/data_folder/  # Upload the file to S3
    #     done
    #   shell: bash
      